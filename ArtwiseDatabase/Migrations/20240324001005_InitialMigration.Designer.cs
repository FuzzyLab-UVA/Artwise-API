// <auto-generated />
using System;
using ArtwiseDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtwiseDatabase.Migrations
{
    [DbContext(typeof(ArtwiseDbContext))]
    [Migration("20240324001005_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("NOCASE")
                .HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("ArtwiseDatabase.Entities.AdditionRequestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("author")
                        .UseCollation("NOCASE");

                    b.Property<bool>("AuthorIsAI")
                        .HasColumnType("INTEGER")
                        .HasColumnName("author_is_ai");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url")
                        .UseCollation("NOCASE");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("source_url")
                        .UseCollation("NOCASE");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT")
                        .HasColumnName("tags")
                        .UseCollation("NOCASE");

                    b.HasKey("Id")
                        .HasName("pk_addition_requests");

                    b.ToTable("addition_requests", null, t =>
                        {
                            t.HasComment("Represents a user art addition request.");
                        });
                });

            modelBuilder.Entity("ArtwiseDatabase.Entities.ArtEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("author")
                        .UseCollation("NOCASE");

                    b.Property<bool>("AuthorIsAI")
                        .HasColumnType("INTEGER")
                        .HasColumnName("author_is_ai");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url")
                        .UseCollation("NOCASE");

                    b.Property<bool>("IsAccessible")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_accessible");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("source_url")
                        .UseCollation("NOCASE");

                    b.HasKey("Id")
                        .HasName("pk_arts");

                    b.ToTable("arts", null, t =>
                        {
                            t.HasComment("Represents an art.");
                        });
                });

            modelBuilder.Entity("ArtwiseDatabase.Entities.RemovalRequestEntity", b =>
                {
                    b.Property<Guid>("ArtId")
                        .HasColumnType("TEXT")
                        .HasColumnName("art_id");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email")
                        .UseCollation("NOCASE");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description")
                        .UseCollation("NOCASE");

                    b.HasKey("ArtId", "Email")
                        .HasName("pk_removal_requests");

                    b.ToTable("removal_requests", null, t =>
                        {
                            t.HasComment("Represents a user art removal request.");
                        });
                });

            modelBuilder.Entity("ArtwiseDatabase.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("ArtId")
                        .HasColumnType("TEXT")
                        .HasColumnName("art_id");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT")
                        .HasColumnName("tag")
                        .UseCollation("NOCASE");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.HasKey("ArtId", "Tag")
                        .HasName("pk_tags");

                    b.ToTable("tags", null, t =>
                        {
                            t.HasComment("Represents an art tag.");
                        });
                });

            modelBuilder.Entity("ArtwiseDatabase.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("TEXT")
                        .HasColumnName("date_added");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email")
                        .UseCollation("NOCASE");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password_hash")
                        .UseCollation("NOCASE");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Represents a user.");
                        });
                });

            modelBuilder.Entity("ArtwiseDatabase.Entities.RemovalRequestEntity", b =>
                {
                    b.HasOne("ArtwiseDatabase.Entities.ArtEntity", "Art")
                        .WithMany("RemovalRequests")
                        .HasForeignKey("ArtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_removal_requests_arts_art_id");

                    b.Navigation("Art");
                });

            modelBuilder.Entity("ArtwiseDatabase.Entities.TagEntity", b =>
                {
                    b.HasOne("ArtwiseDatabase.Entities.ArtEntity", "Art")
                        .WithMany("Tags")
                        .HasForeignKey("ArtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tags_arts_art_id");

                    b.Navigation("Art");
                });

            modelBuilder.Entity("ArtwiseDatabase.Entities.ArtEntity", b =>
                {
                    b.Navigation("RemovalRequests");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
